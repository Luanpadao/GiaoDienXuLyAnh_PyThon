# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'screen.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import sys
import snap7
import snap7.client
from pyzbar import pyzbar

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(858, 665)
        MainWindow.setMouseTracking(False)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(234, 234, 234)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.camera = QtWidgets.QComboBox(self.centralwidget)
        self.camera.setGeometry(QtCore.QRect(80, 80, 141, 22))
        self.camera.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.camera.setObjectName("camera")
        self.bt_on = QtWidgets.QPushButton(self.centralwidget)
        self.bt_on.setGeometry(QtCore.QRect(110, 110, 75, 24))
        self.bt_on.setStyleSheet("background-color:green")
        self.bt_on.setObjectName("bt_on")
        self.bt_connect = QtWidgets.QPushButton(self.centralwidget)
        self.bt_connect.setGeometry(QtCore.QRect(270, 110, 75, 24))
        self.bt_connect.setStyleSheet("background-color:green")
        self.bt_connect.setObjectName("bt_connect")
        self.ip_plc = QtWidgets.QLineEdit(self.centralwidget)
        self.ip_plc.setGeometry(QtCore.QRect(240, 80, 141, 21))
        self.ip_plc.setStyleSheet("background-color: rgb(255, 255, 255)")
        self.ip_plc.setText("")
        self.ip_plc.setObjectName("ip_plc")
        self.bt_scan = QtWidgets.QPushButton(self.centralwidget)
        self.bt_scan.setGeometry(QtCore.QRect(600, 610, 75, 24))
        self.bt_scan.setStyleSheet("background-color:rgb(250, 255, 160)")
        self.bt_scan.setObjectName("bt_scan")
        self.bt_off = QtWidgets.QPushButton(self.centralwidget)
        self.bt_off.setGeometry(QtCore.QRect(110, 110, 75, 24))
        self.bt_off.setStyleSheet("background-color:red\n"
"")
        self.bt_off.setObjectName("bt_off")
        self.lb_origin = QtWidgets.QLabel(self.centralwidget)
        self.lb_origin.setGeometry(QtCore.QRect(30, 170, 401, 371))
        self.lb_origin.setAutoFillBackground(False)
        self.lb_origin.setStyleSheet("background-color:rgb(166, 255, 228)")
        self.lb_origin.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.lb_origin.setText("")
        self.lb_origin.setAlignment(QtCore.Qt.AlignCenter)
        self.lb_origin.setObjectName("lb_origin")
        self.lb_xla = QtWidgets.QLabel(self.centralwidget)
        self.lb_xla.setGeometry(QtCore.QRect(440, 170, 401, 371))
        self.lb_xla.setStyleSheet("background-color:rgb(254, 255, 187)")
        self.lb_xla.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.lb_xla.setText("")
        self.lb_xla.setAlignment(QtCore.Qt.AlignCenter)
        self.lb_xla.setObjectName("lb_xla")
        self.bt_disconnect = QtWidgets.QPushButton(self.centralwidget)
        self.bt_disconnect.setGeometry(QtCore.QRect(270, 110, 75, 24))
        self.bt_disconnect.setStyleSheet("background-color:red")
        self.bt_disconnect.setObjectName("bt_disconnect")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setEnabled(False)
        self.lineEdit.setGeometry(QtCore.QRect(0, 0, 861, 61))
        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(26)
        self.lineEdit.setFont(font)
        self.lineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.lineEdit.setStyleSheet("background-color: rgb(207, 207, 207)")
        self.lineEdit.setFrame(False)
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setEnabled(False)
        self.lineEdit_2.setGeometry(QtCore.QRect(30, 550, 401, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.lineEdit_2.setStyleSheet("background-color:  rgb(234, 234, 234);\n"
"color: rgb(85, 0, 255)\n"
"")
        self.lineEdit_2.setFrame(False)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setEnabled(False)
        self.lineEdit_3.setGeometry(QtCore.QRect(440, 550, 401, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.lineEdit_3.setStyleSheet("background-color:  rgb(234, 234, 234);\n"
"color: rgb(85, 0, 255)")
        self.lineEdit_3.setFrame(False)
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.bt_off.raise_()
        self.bt_on.raise_()
        self.bt_disconnect.raise_()
        self.camera.raise_()
        self.bt_connect.raise_()
        self.ip_plc.raise_()
        self.bt_scan.raise_()
        self.lb_origin.raise_()
        self.lb_xla.raise_()
        self.lineEdit.raise_()
        self.lineEdit_2.raise_()
        self.lineEdit_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.bt_on.setText(_translate("MainWindow", "Turn on"))
        self.bt_connect.setText(_translate("MainWindow", "Connect"))
        self.ip_plc.setPlaceholderText(_translate("MainWindow", "192.168.0.1"))
        self.bt_scan.setText(_translate("MainWindow", "Scan"))
        self.bt_off.setText(_translate("MainWindow", "Turn off"))
        self.bt_disconnect.setText(_translate("MainWindow", "Disconnect"))
        self.lineEdit.setText(_translate("MainWindow", "Digital image processing"))
        self.lineEdit_2.setText(_translate("MainWindow", "image orginal"))
        self.lineEdit_3.setText(_translate("MainWindow", "image processed"))
        # ---------------------------------------------------------------------BẮT ĐẦU----------------------------------------------------------------
        self.bt_off.setVisible(False)
        self.thread = {}
        # Lấy danh sách thiết bị camera
        self.get_camera_list()
        # Kết nối sự kiện click của nút "on" với hàm xử lý
        self.bt_on.clicked.connect(self.turnon_camera)
        self.bt_off.clicked.connect(self.turnoff_camera)
        self.bt_connect.clicked.connect(self.connect_plc)
        self.bt_disconnect.clicked.connect(self.disconnect_plc)
    # ---------------------------------------------------------------------------------------------------------------
    def get_camera_list(self):
        camera_list = []
        index = 0
        while True:
            # Thử mở camera với từng index cho đến khi không thể mở
            cap = cv2.VideoCapture(index)
            if not cap.isOpened():
                break
            else:
                # Lấy thông tin thiết bị camera và thêm vào danh sách
                camera_info = f"Camera {index}: {cap.getBackendName()}"
                camera_list.append(camera_info)
                cap.release()
            index += 1
        self.camera.addItems(camera_list)
    def turnoff_camera(self):
        self.bt_on.setVisible(True)
        self.bt_off.setVisible(False)
        self.stop_capture_video()
    def turnon_camera(self):
        global camera_index 
        camera_index = self.camera.currentIndex()
        print("Connecting camera " + str(camera_index) + "....")
        self.bt_on.setVisible(False)
        self.bt_off.setVisible(True)
        self.start_capture_video()
    def start_capture_video(self):
        self.thread[1] = capture_video(index=1)
        self.thread[1].start()
        self.thread[1].signal.connect(self.show_webcam)
    def closeEvent(self, event):
        self.stop_capture_video()
        self.lb_origin.clear()
        self.lb_xla.clear()
    def stop_capture_video(self):
        self.thread[1].stop()
        self.lb_origin.clear()
        self.lb_xla.clear()
    def show_webcam(self,img):
        """Updates the image_label with a new opencv image"""
        # self.show_xla(self.convert_cv_qt(img))
        self.read_qr_code(self.convert_cv_qt(img))
    #------------------------------------------------------------Xử lý ảnh----------------------------------------------------------------
    def convert_cv_qt(self, cv_img):
        # """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(400, 300, QtCore.Qt.KeepAspectRatio)
        qt_img = QtGui.QPixmap.fromImage(p)
        self.lb_origin.setPixmap(qt_img)
        return rgb_image
    def show_xla(self,img):
        p = self.convert_gray(img).scaled(400, 300, QtCore.Qt.KeepAspectRatio)
        xl_img = QtGui.QPixmap.fromImage(p)
        self.lb_xla.setPixmap(xl_img)
    def convert_hsv(self,img):
        hsv = cv2.cvtColor(img,cv2.COLOR_RGB2HSV)
        h, w, ch = hsv.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(hsv.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        return convert_to_Qt_format
    def convert_gray(self,img):
        gray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)
        if gray.ndim == 2:
            # Grayscale image
            h, w = gray.shape
            bytes_per_line = w
            convert_to_Qt_format = QtGui.QImage(gray.data, w, h, bytes_per_line, QtGui.QImage.Format_Grayscale8)
        else:
            # Colored image
            h, w, ch = gray.shape
            bytes_per_line = ch * w
            convert_to_Qt_format = QtGui.QImage(gray.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        return convert_to_Qt_format
    def read_qr_code(self,img):
        barcodes = pyzbar.decode(img)
        for barcode in barcodes:                #lấy thông tin từng barcode từ những barcodes
            (x,y,w,h) = barcode.rect                                #lay thong tin kích thước để vẽ hinh chu nhat
            cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),2)       #ve hinh chu nhat lên bức ảnh
            barcodeData = barcode.data.decode("utf-8")              #Lấy thông tin dữ liệu mà barcode mã hóa
            barcodeType = barcode.type                              #kiểu barcode
            # text = "{} - {} ".format(barcodeData,barcodeType)       #tổng hợp thông tin từ barcode vào biến text
            text = barcodeData
            qrCode = text
            print(text)                                             #in dữ liệu lấy được từ barcode lên terminal để xem
            myOutput = text
            myColor = (0,255,0)
            cv2.putText(img,myOutput,(x-10,y-10),cv2.FONT_HERSHEY_SIMPLEX,0.5,myColor,1)        #hiển thị chữ lên barcode trên ảnh
            h, w, ch = img.shape
            bytes_per_line = ch * w
            convert_to_Qt_format = QtGui.QImage(img.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
            p = convert_to_Qt_format.scaled(400, 300, QtCore.Qt.KeepAspectRatio)
            qrcode_img = QtGui.QPixmap.fromImage(p)
            self.lb_xla.setPixmap(qrcode_img)
    #------------------------------------------------------------Kết thúc xử lý ảnh----------------------------------------------------------------
    def connect_plc(self):
        # Kết nối tới PLC S7-1200
        self.plc = snap7.client.Client()
        ip = self.ip_plc.text()
        if ip == "":
            print("Vui lòng nhập địa chỉ ip!")
        else:
            try:
                self.plc.connect(ip, 0, 1)
                print("Kết nối thành công tới PLC!")
                self.bt_connect.setVisible(False)
                self.bt_disconnect.setVisible(True)
            except Exception as e:
                print("Lỗi kết nối tới PLC:", str(e))
    def disconnect_plc(self):
        # Ngắt kết nối PLC
        try:
            self.plc.disconnect()
            print("Ngắt kết nối thành công!")
            self.bt_connect.setVisible(True)
            self.bt_disconnect.setVisible(False)
        except Exception as e:
            print("Lỗi khi ngắt kết nối:", str(e))
    def read_tag_string(self,variable_name, DB, offset, length, address):
        data = self.plc.read_area(snap7.types.Areas.DB, DB, offset, length)  # Đọc dữ liệu từ DB
        value = snap7.util.get_string(data, 0, address)  # Đọc tag là chuỗi
        return value
class capture_video(QtCore.QThread):
    signal = QtCore.pyqtSignal(np.ndarray)
    def __init__(self, index):
        self.index = index
        print("start threading", self.index)
        super(capture_video, self).__init__()
    def run(self):
        global camera_index
        cap = cv2.VideoCapture(camera_index)
        while True:
            ret,img = cap.read()
            if ret:
                self.signal.emit(img)
    def stop(self):
        print("stop threading", self.index)
        self.terminate()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
